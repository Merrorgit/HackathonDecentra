# src/pipeline/pdf_utils.py
import io
from typing import List
from PIL import Image
import pdf2image
import fitz  # PyMuPDF

def pdf_to_images(pdf_bytes: bytes, dpi: int = 200, max_pages: int = 10) -> List[Image.Image]:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PDF –≤ —Å–ø–∏—Å–æ–∫ PIL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    
    Args:
        pdf_bytes: PDF —Ñ–∞–π–ª –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤
        dpi: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (200 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏)
        max_pages: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
    Returns:
        –°–ø–∏—Å–æ–∫ PIL.Image –æ–±—ä–µ–∫—Ç–æ–≤
    """
    images = []
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pdf2image (—á–µ—Ä–µ–∑ poppler) —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º DPI
        images = pdf2image.convert_from_bytes(
            pdf_bytes,
            dpi=dpi,
            first_page=1,
            last_page=min(max_pages, 20),  # —É–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
            fmt='RGB',
            thread_count=1  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏
        )
        return images[:max_pages]
    
    except Exception as e:
        # Fallback –Ω–∞ PyMuPDF
        try:
            pdf_doc = fitz.open(stream=pdf_bytes, filetype="pdf")
            images = []
            
            for page_num in range(min(len(pdf_doc), max_pages)):
                page = pdf_doc[page_num]
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–º–µ—Ä–µ–Ω–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
                mat = fitz.Matrix(dpi/72, dpi/72)  # 72 DPI - –±–∞–∑–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ PDF
                pix = page.get_pixmap(matrix=mat)
                img_data = pix.tobytes("png")
                
                # –°–æ–∑–¥–∞–µ–º PIL Image
                img = Image.open(io.BytesIO(img_data))
                images.append(img)
            
            pdf_doc.close()
            return images
            
        except Exception as fallback_error:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PDF: {e}, fallback error: {fallback_error}")

def extract_all_pages_text(pdf_bytes: bytes, dpi: int = 300, max_pages: int = 20, *, force_ocr: bool = False, strong_mode: bool = False) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü PDF —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø—Ä—è–º–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è (PyMuPDF)
    –∏ fallback –Ω–∞ OCR —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–ø—É—Å—Ç—ã–µ/—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã).

    Args:
        pdf_bytes: PDF —Ñ–∞–π–ª –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤
        dpi: DPI –¥–ª—è —Ä–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ OCR (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω OCR)
        max_pages: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns:
        –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü, —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    """
    from src.pipeline.ocr import run_ocr
    import gc

    try:
        doc = fitz.open(stream=pdf_bytes, filetype="pdf")
    except Exception:
        # –ï—Å–ª–∏ PDF –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –¥–ª—è fitz ‚Äî –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å
        return _extract_all_pages_text_via_ocr_only(pdf_bytes, dpi=dpi, max_pages=max_pages)

    all_text: List[str] = []
    total_pages = min(len(doc), max_pages)
    for i in range(total_pages):
        try:
            page = doc[i]

            # 1) –ü—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤—ã—Ç–∞—â–∏—Ç—å —Ç–µ–∫—Å—Ç (–ª—É—á—à–µ–µ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö PDF), –µ—Å–ª–∏ –Ω–µ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º OCR
            if not force_ocr:
                direct_text = _direct_text_from_page(page)
                if direct_text and len(direct_text.strip()) >= 25:
                    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä—è–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    if not _looks_corrupted_text(direct_text):
                        print(f"üìÑ –°—Ç—Ä. {i+1}/{total_pages}: direct PDF text")
                        all_text.append(f"=== –°–¢–†–ê–ù–ò–¶–ê {i+1} ===\n{direct_text.strip()}")
                        continue
                    else:
                        print(f"üñºÔ∏è –°—Ç—Ä. {i+1}/{total_pages}: direct text looks corrupted -> OCR fallback")

            # 2) Fallback: —Ä–∞—Å—Ç–µ—Ä–∏–∑—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º OCR
            use_dpi = max(300, dpi)
            print(f"üñºÔ∏è –°—Ç—Ä. {i+1}/{total_pages}: OCR fallback (dpi={use_dpi})")
            mat = fitz.Matrix(use_dpi / 72.0, use_dpi / 72.0)
            pix = page.get_pixmap(matrix=mat, alpha=False)
            img_data = pix.tobytes("png")
            pil_img = Image.open(io.BytesIO(img_data)).convert("RGB")
            if strong_mode:
                # –°—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–∏–ª–µ–Ω–Ω—É—é –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É
                try:
                    from src.pipeline.preprocess import preprocess_pil_image
                    pil_strong = preprocess_pil_image(pil_img, strong=True)
                    page_text = run_ocr(pil_strong, do_preprocess=False)
                except Exception:
                    page_text = run_ocr(pil_img)
            else:
                page_text = run_ocr(pil_img)
                if not page_text.strip():
                    # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞: –±–æ–ª–µ–µ —Å–∏–ª—å–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
                    try:
                        from src.pipeline.preprocess import preprocess_pil_image
                        pil_strong = preprocess_pil_image(pil_img, strong=True)
                        page_text = run_ocr(pil_strong, do_preprocess=False)
                    except Exception:
                        pass
            pil_img.close()
            del pix, img_data
            gc.collect()

            if page_text.strip():
                all_text.append(f"=== –°–¢–†–ê–ù–ò–¶–ê {i+1} ===\n{page_text}")
            else:
                all_text.append(f"=== –°–¢–†–ê–ù–ò–¶–ê {i+1} ===\n")

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {i+1}: {e}")
            all_text.append(f"=== –°–¢–†–ê–ù–ò–¶–ê {i+1} ===\n")
        finally:
            gc.collect()

    doc.close()
    return "\n\n".join(all_text)


def _direct_text_from_page(page: "fitz.Page") -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ –±–ª–æ–∫–∞–º.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º blocks –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –∏ –ø–æ—Ä—è–¥–∫–∞ —á—Ç–µ–Ω–∏—è.
    """
    try:
        blocks = page.get_text("blocks") or []
        # blocks: (x0, y0, x1, y1, text, block_no, block_type, ...)
        blocks = [b for b in blocks if len(b) >= 5 and isinstance(b[4], str)]
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–≤–µ—Ä—Ö—É-–≤–Ω–∏–∑, –∑–∞—Ç–µ–º —Å–ª–µ–≤–∞-–Ω–∞–ø—Ä–∞–≤–æ
        blocks.sort(key=lambda b: (round(b[1], 2), round(b[0], 2)))
        lines: List[str] = []
        for b in blocks:
            t = (b[4] or "").strip()
            if t:
                lines.append(t)
        text = "\n".join(lines)
        # –ï—Å–ª–∏ direct text –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º
        if not text.strip():
            text = (page.get_text("text") or "").strip()
        return text
    except Exception:
        try:
            return (page.get_text("text") or "").strip()
        except Exception:
            return ""


def _extract_all_pages_text_via_ocr_only(pdf_bytes: bytes, dpi: int, max_pages: int) -> str:
    """–ó–∞–ø–∞—Å–Ω–æ–π –ø—É—Ç—å: –ø–æ–ª–Ω–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ —Ä–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é + OCR (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)."""
    from src.pipeline.ocr import run_ocr
    import gc

    images = pdf_to_images(pdf_bytes, dpi=max(300, dpi), max_pages=max_pages)
    if not images:
        raise ValueError("PDF –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å")

    all_text = []
    for i, img in enumerate(images):
        try:
            print(f"üñºÔ∏è OCR only: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}/{len(images)} (dpi={dpi})")
            page_text = run_ocr(img)
            if page_text.strip():
                all_text.append(f"=== –°–¢–†–ê–ù–ò–¶–ê {i+1} ===\n{page_text}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {i+1}: {e}")
        finally:
            del img
            gc.collect()

    del images
    gc.collect()
    return "\n\n".join(all_text)


def _looks_corrupted_text(text: str) -> bool:
    """–≠–≤—Ä–∏—Å—Ç–∏–∫–∞: —Ç–µ–∫—Å—Ç –±–∏—Ç—ã–π, –µ—Å–ª–∏ –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã (I, l, |)
    –∏ –Ω–∏–∑–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –±—É–∫–≤/—Ü–∏—Ñ—Ä. –ß–∞—Å—Ç–æ –±—ã–≤–∞–µ—Ç –≤ PDF –±–µ–∑ ToUnicode –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã.
    """
    if not text:
        return True
    s = text.replace("\n", "")
    if len(s) < 20:
        return True
    # –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤
    uniq_ratio = len(set(s)) / len(s)
    # –î–æ–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ä–µ–¥–∏ –±—É–∫–≤
    letters = [ch for ch in s if ch.isalpha()]
    if letters:
        bad = sum(1 for ch in letters if ch in {'I', 'l', '|', 'ƒ±', 'ƒ∞'})
        bad_ratio = bad / len(letters)
    else:
        bad_ratio = 0.0
    # –î–æ–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    cyr = sum(1 for ch in s if '–ê' <= ch <= '—è' or ch in '–Å—ë')
    cyr_ratio = cyr / len(s)
    # –ü—Ä–∏–∑–Ω–∞–∫–∏ –±–∏—Ç–æ—Å—Ç–∏: –Ω–∏–∑–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∏–ª–∏ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –¥–æ–ª—è I/| —Å—Ä–µ–¥–∏ –±—É–∫–≤
    if bad_ratio >= 0.5:
        return True
    if uniq_ratio < 0.20 and len(letters) > 0:
        return True
    # –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ (–µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞) –Ω–æ cyr_ratio –∞–Ω–æ–º–∞–ª—å–Ω–æ –º–∞–ª
    keywords = ['–ö–û–ù–¢–†–ê–ö–¢', '–î–∞—Ç–∞', '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', '–°—Ç—Ä–∞–Ω–∞', '–í–∞–ª—é—Ç–∞', '–°—É–º–º–∞']
    if any(kw in text for kw in keywords) and cyr_ratio < 0.02:
        return True
    return False

def is_pdf_file(file_bytes: bytes) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª PDF –ø–æ magic bytes.
    
    Args:
        file_bytes: –ü–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞
        
    Returns:
        True –µ—Å–ª–∏ —Ñ–∞–π–ª PDF
    """
    return file_bytes.startswith(b'%PDF')