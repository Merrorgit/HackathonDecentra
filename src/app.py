import streamlit as st
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from PIL import Image
from src.pipeline.ocr import run_ocr
from src.pipeline.pdf_utils import extract_all_pages_text, is_pdf_file
from src.ollama_client import extract_fields

st.set_page_config(page_title="OCR Decentrathon")
st.title("Team Sudo rm -rf /. Case 2. OCR.")
st.markdown("*–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö*")

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–æ–ª—å–∫–æ PDF —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
uploaded = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç—å PDF –∫–æ–Ω—Ç—Ä–∞–∫—Ç", 
    type=["pdf"]
)

if uploaded:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if uploaded.size > 10 * 1024 * 1024:  # 10 –ú–ë
        st.error("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 –ú–ë")
        st.stop()
    
    file_bytes = uploaded.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ PDF —Ñ–∞–π–ª
    if not is_pdf_file(file_bytes):
        st.error("‚ùå –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–º!")
        st.stop()
        st.stop()
    
    st.info("üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω. –ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ...")
    st.success(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(file_bytes)} –±–∞–π—Ç")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã OCR –∏–∑ —Å–∞–π–¥–±–∞—Ä–∞
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OCR")
        force_ocr = st.checkbox("–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (Force OCR)", value=False)
        strong_mode = st.checkbox("–£—Å–∏–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å–∫–∞–Ω–æ–≤", value=False)
        dpi = st.slider("DPI –¥–ª—è OCR", min_value=200, max_value=400, step=50, value=300)
        max_pages = st.number_input("–ú–∞–∫—Å. —Å—Ç—Ä–∞–Ω–∏—Ü", min_value=1, max_value=50, value=10, step=1)

    if st.button("üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å OCR –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö", type="primary"):
        with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞..."):
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                text = extract_all_pages_text(
                    file_bytes,
                    dpi=int(dpi),
                    max_pages=int(max_pages),
                    force_ocr=bool(force_ocr),
                    strong_mode=bool(strong_mode),
                )
                
                if not text.strip():
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞!")
                    st.stop()
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
                    st.text_area("OCR Result", value=text, height=400, key="ocr_text")
                
                with col2:
                    st.subheader("üè∑Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    
                    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é LLM..."):
                        # –ü–æ–ª—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
                        fields = [
                            "contract_number",        # ‚Ññ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                            "contract_date",          # –¥–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è (–¥–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞)
                            "expiration_date",        # –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞, –¥–æ–≥–æ–≤–æ—Ä–∞)
                            "counterparty",           # –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç (–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞)
                            "country",                # —Å—Ç—Ä–∞–Ω–∞ (—Å—Ç—Ä–∞–Ω–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ (–∏–Ω–æ–ø–∞—Ä—Ç–Ω–µ—Ä–∞))
                            "contract_amount",        # —Å—É–º–º–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                            "contract_currency",      # –≤–∞–ª—é—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
                            "payment_currency"        # –≤–∞–ª—é—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞
                        ]
                        
                        parsed = extract_fields(text, fields)
                        st.json(parsed)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                    if text.strip():
                        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                        pages_count = text.count("=== –°–¢–†–ê–ù–ò–¶–ê")
                        st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {pages_count}")
                        st.info(f"üìä –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(text)}")
                        extracted_fields = sum(1 for v in parsed.values() if v is not None)
                        st.info(f"üéØ –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ–ª–µ–π: {extracted_fields}/{len(fields)}")
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
                st.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –º–æ–¥–µ–ª—å gemma3:1b –∑–∞–ø—É—â–µ–Ω–∞ –≤ Ollama")

# –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OCR –≤ —Å–∞–π–¥–±–∞—Ä–µ (—Å–º. –≤—ã—à–µ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ uploaded)
